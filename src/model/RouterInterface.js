/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RouterInterfaceBrIntfs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./RouterInterfaceBrIntfs'));
  } else {
    // Browser globals (root is window)
    if (!root.PrismNbapi) {
      root.PrismNbapi = {};
    }
    root.PrismNbapi.RouterInterface = factory(root.PrismNbapi.ApiClient, root.PrismNbapi.RouterInterfaceBrIntfs);
  }
}(this, function(ApiClient, RouterInterfaceBrIntfs) {
  'use strict';




  /**
   * The RouterInterface model module.
   * @module model/RouterInterface
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>RouterInterface</code>.
   * @alias module:model/RouterInterface
   * @class
   * @param name {String} 인터페이스 이름 - type이 physical일 경우, Get All PRISM Physical Interface API로 가져올 수 있는 인터페이스만 사용이 가능함 - type이 bridge일 경우, 앞에 pr이 반드시 붙고 뒤에는 마음대로 하면 된다 - type이 bond일 경우, 되도록이면 pr-bond1 식으로 앞에 pr이 붙는 이름으로 사용
   * @param type {module:model/RouterInterface.TypeEnum} 인터페이스 타입 physical, bridge, bond 중 선택가능
   */
  var exports = function(name, type) {
    var _this = this;

    _this['name'] = name;
    _this['type'] = type;






  };

  /**
   * Constructs a <code>RouterInterface</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RouterInterface} obj Optional instance to populate.
   * @return {module:model/RouterInterface} The populated <code>RouterInterface</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('ip')) {
        obj['ip'] = ApiClient.convertToType(data['ip'], ['String']);
      }
      if (data.hasOwnProperty('tenant_name')) {
        obj['tenant_name'] = ApiClient.convertToType(data['tenant_name'], 'String');
      }
      if (data.hasOwnProperty('translate')) {
        obj['translate'] = ApiClient.convertToType(data['translate'], 'String');
      }
      if (data.hasOwnProperty('stp')) {
        obj['stp'] = ApiClient.convertToType(data['stp'], 'String');
      }
      if (data.hasOwnProperty('vlan_id')) {
        obj['vlan_id'] = ApiClient.convertToType(data['vlan_id'], 'Number');
      }
      if (data.hasOwnProperty('br_intfs')) {
        obj['br_intfs'] = ApiClient.convertToType(data['br_intfs'], [RouterInterfaceBrIntfs]);
      }
    }
    return obj;
  }

  /**
   * 인터페이스 이름 - type이 physical일 경우, Get All PRISM Physical Interface API로 가져올 수 있는 인터페이스만 사용이 가능함 - type이 bridge일 경우, 앞에 pr이 반드시 붙고 뒤에는 마음대로 하면 된다 - type이 bond일 경우, 되도록이면 pr-bond1 식으로 앞에 pr이 붙는 이름으로 사용
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * 인터페이스 타입 physical, bridge, bond 중 선택가능
   * @member {module:model/RouterInterface.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * 인터페이스에 설정할 IP - IPv4면 1.0.0.1/24 식으로 netmask 까지 입력 - IPv6면 3333::3/64 식으로 netmask까지 입력
   * @member {Array.<String>} ip
   */
  exports.prototype['ip'] = undefined;
  /**
   * @member {String} tenant_name
   */
  exports.prototype['tenant_name'] = undefined;
  /**
   * on | off | null 테넌트간 통신을 위한 루프백 설정 true를 전송 시 xvid.cfg에 해당 정보 저장. 그 외는 무시 (type이 bridge인 경우 사용)
   * @member {module:model/RouterInterface.TranslateEnum} translate
   */
  exports.prototype['translate'] = undefined;
  /**
   * on | off | null stp 적용 설정. default는 null (type이 bridge인 경우 사용)
   * @member {module:model/RouterInterface.StpEnum} stp
   */
  exports.prototype['stp'] = undefined;
  /**
   * Bridge 인터페이스에 설정할 vlan 번호 (type이 bridge인 경우 사용)
   * @member {Number} vlan_id
   */
  exports.prototype['vlan_id'] = undefined;
  /**
   * Bridge 인터페이스에 포함시킬 인터페이스들 이름과 타입 list
   * @member {Array.<module:model/RouterInterfaceBrIntfs>} br_intfs
   */
  exports.prototype['br_intfs'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "physical"
     * @const
     */
    "physical": "physical",
    /**
     * value: "bridge"
     * @const
     */
    "bridge": "bridge",
    /**
     * value: "bond"
     * @const
     */
    "bond": "bond"  };

  /**
   * Allowed values for the <code>translate</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TranslateEnum = {
    /**
     * value: "on"
     * @const
     */
    "on": "on",
    /**
     * value: "off"
     * @const
     */
    "off": "off",
    /**
     * value: "null"
     * @const
     */
    "null": "null"  };

  /**
   * Allowed values for the <code>stp</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StpEnum = {
    /**
     * value: "on"
     * @const
     */
    "on": "on",
    /**
     * value: "off"
     * @const
     */
    "off": "off",
    /**
     * value: "null"
     * @const
     */
    "null": "null"  };


  return exports;
}));


