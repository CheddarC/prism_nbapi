/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DhcpInfo', 'model/DhcpSvrInfo', 'model/DhcpUpdateInfo', 'model/ErrorMessage', 'model/Result'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DhcpInfo'), require('../model/DhcpSvrInfo'), require('../model/DhcpUpdateInfo'), require('../model/ErrorMessage'), require('../model/Result'));
  } else {
    // Browser globals (root is window)
    if (!root.PrismNbapi) {
      root.PrismNbapi = {};
    }
    root.PrismNbapi.DhcpApi = factory(root.PrismNbapi.ApiClient, root.PrismNbapi.DhcpInfo, root.PrismNbapi.DhcpSvrInfo, root.PrismNbapi.DhcpUpdateInfo, root.PrismNbapi.ErrorMessage, root.PrismNbapi.Result);
  }
}(this, function(ApiClient, DhcpInfo, DhcpSvrInfo, DhcpUpdateInfo, ErrorMessage, Result) {
  'use strict';

  /**
   * Dhcp service.
   * @module api/DhcpApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DhcpApi. 
   * @alias module:api/DhcpApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getQosDhcpServerInfo operation.
     * @callback module:api/DhcpApi~getQosDhcpServerInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DhcpSvrInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DHCP Server information
     * @param {String} tenantName Tenant 이름
     * @param {String} intfName DHCP Server가 listening 하는 interface 이름
     * @param {module:api/DhcpApi~getQosDhcpServerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DhcpSvrInfo}
     */
    this.getQosDhcpServerInfo = function(tenantName, intfName, callback) {
      var postBody = null;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling getQosDhcpServerInfo");
      }

      // verify the required parameter 'intfName' is set
      if (intfName === undefined || intfName === null) {
        throw new Error("Missing the required parameter 'intfName' when calling getQosDhcpServerInfo");
      }


      var pathParams = {
        'tenant_name': tenantName,
        'intf_name': intfName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DhcpSvrInfo;

      return this.apiClient.callApi(
        '/prism/dhcp/{tenant_name}/{intf_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runDhcpServer operation.
     * @callback module:api/DhcpApi~runDhcpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run DHCP Server
     * @param {module:model/DhcpInfo} dhcpInfo DHCP 정보.
     * @param {module:api/DhcpApi~runDhcpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    this.runDhcpServer = function(dhcpInfo, callback) {
      var postBody = dhcpInfo;

      // verify the required parameter 'dhcpInfo' is set
      if (dhcpInfo === undefined || dhcpInfo === null) {
        throw new Error("Missing the required parameter 'dhcpInfo' when calling runDhcpServer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Result;

      return this.apiClient.callApi(
        '/prism/dhcp', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateDhcpServer operation.
     * @callback module:api/DhcpApi~terminateDhcpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate DHCP Server
     * @param {String} tenantName Tenant 이름
     * @param {String} intfName DHCP Server가 listening 하는 interface 이름
     * @param {module:api/DhcpApi~terminateDhcpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    this.terminateDhcpServer = function(tenantName, intfName, callback) {
      var postBody = null;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling terminateDhcpServer");
      }

      // verify the required parameter 'intfName' is set
      if (intfName === undefined || intfName === null) {
        throw new Error("Missing the required parameter 'intfName' when calling terminateDhcpServer");
      }


      var pathParams = {
        'tenant_name': tenantName,
        'intf_name': intfName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Result;

      return this.apiClient.callApi(
        '/prism/dhcp/{tenant_name}/{intf_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDhcpServer operation.
     * @callback module:api/DhcpApi~updateDhcpServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update DHCP Server
     * @param {String} intfName DHCP Server가 listening 하는 interface 이름
     * @param {String} command DHCP Server에 host 추가시 add, 삭제시 rem
     * @param {module:model/DhcpUpdateInfo} dhcpUpdateInfo 
     * @param {module:api/DhcpApi~updateDhcpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    this.updateDhcpServer = function(intfName, command, dhcpUpdateInfo, callback) {
      var postBody = dhcpUpdateInfo;

      // verify the required parameter 'intfName' is set
      if (intfName === undefined || intfName === null) {
        throw new Error("Missing the required parameter 'intfName' when calling updateDhcpServer");
      }

      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling updateDhcpServer");
      }

      // verify the required parameter 'dhcpUpdateInfo' is set
      if (dhcpUpdateInfo === undefined || dhcpUpdateInfo === null) {
        throw new Error("Missing the required parameter 'dhcpUpdateInfo' when calling updateDhcpServer");
      }


      var pathParams = {
        'intf_name': intfName,
        'command': command
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Result;

      return this.apiClient.callApi(
        '/prism/dhcp/{intf_name}/host/{command}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
