/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorMessage', 'model/RoutersObject', 'model/TenantName'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorMessage'), require('../model/RoutersObject'), require('../model/TenantName'));
  } else {
    // Browser globals (root is window)
    if (!root.PrismNbapi) {
      root.PrismNbapi = {};
    }
    root.PrismNbapi.RouterApi = factory(root.PrismNbapi.ApiClient, root.PrismNbapi.ErrorMessage, root.PrismNbapi.RoutersObject, root.PrismNbapi.TenantName);
  }
}(this, function(ApiClient, ErrorMessage, RoutersObject, TenantName) {
  'use strict';

  /**
   * Router service.
   * @module api/RouterApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RouterApi. 
   * @alias module:api/RouterApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRouter operation.
     * @callback module:api/RouterApi~createRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create PRISM router
     * 지정된 테넌트 이름으로 라우터 생성.
     * @param {module:model/TenantName} tenantName 라우터가 속하게 될 테넌트의 이름.
     * @param {module:api/RouterApi~createRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantName}
     */
    this.createRouter = function(tenantName, callback) {
      var postBody = tenantName;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling createRouter");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TenantName;

      return this.apiClient.callApi(
        '/prism/router', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRouter operation.
     * @callback module:api/RouterApi~deleteRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete PRISM router
     * 지정된 테넌트 이름의 라우터 삭제.
     * @param {String} tenantName 삭제할 테넌트 이름
     * @param {module:api/RouterApi~deleteRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantName}
     */
    this.deleteRouter = function(tenantName, callback) {
      var postBody = null;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling deleteRouter");
      }


      var pathParams = {
        'tenant_name': tenantName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TenantName;

      return this.apiClient.callApi(
        '/prism/router/{tenant_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRouter operation.
     * @callback module:api/RouterApi~getAllRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutersObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 모든 라우터를 조회
     * @param {module:api/RouterApi~getAllRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutersObject}
     */
    this.getAllRouter = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RoutersObject;

      return this.apiClient.callApi(
        '/prism/router/all', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
