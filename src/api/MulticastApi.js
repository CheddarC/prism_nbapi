/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorMessage', 'model/MulticastInfo', 'model/MulticastObject'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorMessage'), require('../model/MulticastInfo'), require('../model/MulticastObject'));
  } else {
    // Browser globals (root is window)
    if (!root.PrismNbapi) {
      root.PrismNbapi = {};
    }
    root.PrismNbapi.MulticastApi = factory(root.PrismNbapi.ApiClient, root.PrismNbapi.ErrorMessage, root.PrismNbapi.MulticastInfo, root.PrismNbapi.MulticastObject);
  }
}(this, function(ApiClient, ErrorMessage, MulticastInfo, MulticastObject) {
  'use strict';

  /**
   * Multicast service.
   * @module api/MulticastApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MulticastApi. 
   * @alias module:api/MulticastApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createMulticast operation.
     * @callback module:api/MulticastApi~createMulticastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multicast(pimd)
     * @param {module:model/MulticastInfo} multicastInfo Multicast 정보.
     * @param {module:api/MulticastApi~createMulticastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastInfo}
     */
    this.createMulticast = function(multicastInfo, callback) {
      var postBody = multicastInfo;

      // verify the required parameter 'multicastInfo' is set
      if (multicastInfo === undefined || multicastInfo === null) {
        throw new Error("Missing the required parameter 'multicastInfo' when calling createMulticast");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MulticastInfo;

      return this.apiClient.callApi(
        '/prism/multicast', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMulticastInTenant operation.
     * @callback module:api/MulticastApi~createMulticastInTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multicast in tenant
     * @param {String} tenantName 테넌트의 이름
     * @param {module:model/MulticastInfo} multicastInfo Multicast 정보.
     * @param {module:api/MulticastApi~createMulticastInTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastInfo}
     */
    this.createMulticastInTenant = function(tenantName, multicastInfo, callback) {
      var postBody = multicastInfo;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling createMulticastInTenant");
      }

      // verify the required parameter 'multicastInfo' is set
      if (multicastInfo === undefined || multicastInfo === null) {
        throw new Error("Missing the required parameter 'multicastInfo' when calling createMulticastInTenant");
      }


      var pathParams = {
        'tenant_name': tenantName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MulticastInfo;

      return this.apiClient.callApi(
        '/prism/multicast/tenant/{tenant_name}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMulticast operation.
     * @callback module:api/MulticastApi~deleteMulticastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multicast
     * @param {module:api/MulticastApi~deleteMulticastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastObject}
     */
    this.deleteMulticast = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MulticastObject;

      return this.apiClient.callApi(
        '/prism/multicast', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMulticastInTenant operation.
     * @callback module:api/MulticastApi~deleteMulticastInTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multicast in tenant
     * @param {String} tenantName 테넌트의 이름
     * @param {module:api/MulticastApi~deleteMulticastInTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastObject}
     */
    this.deleteMulticastInTenant = function(tenantName, callback) {
      var postBody = null;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling deleteMulticastInTenant");
      }


      var pathParams = {
        'tenant_name': tenantName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MulticastObject;

      return this.apiClient.callApi(
        '/prism/multicast/tenant/{tenant_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMulicastInfoInTenant operation.
     * @callback module:api/MulticastApi~getAllMulicastInfoInTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Multicast information in tenant
     * @param {String} tenantName 테넌트의 이름
     * @param {module:api/MulticastApi~getAllMulicastInfoInTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastObject}
     */
    this.getAllMulicastInfoInTenant = function(tenantName, callback) {
      var postBody = null;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling getAllMulicastInfoInTenant");
      }


      var pathParams = {
        'tenant_name': tenantName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MulticastObject;

      return this.apiClient.callApi(
        '/prism/multicast/tenant/{tenant_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMulticastInfo operation.
     * @callback module:api/MulticastApi~getAllMulticastInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Multicast information
     * @param {module:api/MulticastApi~getAllMulticastInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastObject}
     */
    this.getAllMulticastInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MulticastObject;

      return this.apiClient.callApi(
        '/prism/multicast', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMulticast operation.
     * @callback module:api/MulticastApi~updateMulticastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multicast
     * @param {module:model/MulticastObject} multicastObject Multicast 정보.
     * @param {module:api/MulticastApi~updateMulticastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastObject}
     */
    this.updateMulticast = function(multicastObject, callback) {
      var postBody = multicastObject;

      // verify the required parameter 'multicastObject' is set
      if (multicastObject === undefined || multicastObject === null) {
        throw new Error("Missing the required parameter 'multicastObject' when calling updateMulticast");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MulticastObject;

      return this.apiClient.callApi(
        '/prism/multicast', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMulticastInTenant operation.
     * @callback module:api/MulticastApi~updateMulticastInTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MulticastObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multicast in tenant
     * @param {String} tenantName 테넌트의 이름
     * @param {module:model/MulticastObject} multicastObject VRRP 정보.
     * @param {module:api/MulticastApi~updateMulticastInTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MulticastObject}
     */
    this.updateMulticastInTenant = function(tenantName, multicastObject, callback) {
      var postBody = multicastObject;

      // verify the required parameter 'tenantName' is set
      if (tenantName === undefined || tenantName === null) {
        throw new Error("Missing the required parameter 'tenantName' when calling updateMulticastInTenant");
      }

      // verify the required parameter 'multicastObject' is set
      if (multicastObject === undefined || multicastObject === null) {
        throw new Error("Missing the required parameter 'multicastObject' when calling updateMulticastInTenant");
      }


      var pathParams = {
        'tenant_name': tenantName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MulticastObject;

      return this.apiClient.callApi(
        '/prism/multicast/tenant/{tenant_name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
