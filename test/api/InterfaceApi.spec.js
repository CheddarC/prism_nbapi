/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PrismNbapi);
  }
}(this, function(expect, PrismNbapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PrismNbapi.InterfaceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InterfaceApi', function() {
    describe('addRouterInterface', function() {
      it('should call addRouterInterface successfully', function(done) {
        //uncomment below and update the code to test addRouterInterface
        //instance.addRouterInterface(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delRouterInterface', function() {
      it('should call delRouterInterface successfully', function(done) {
        //uncomment below and update the code to test delRouterInterface
        //instance.delRouterInterface(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPhyInterface', function() {
      it('should call getAllPhyInterface successfully', function(done) {
        //uncomment below and update the code to test getAllPhyInterface
        //instance.getAllPhyInterface(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPhyInterfaceDetail', function() {
      it('should call getAllPhyInterfaceDetail successfully', function(done) {
        //uncomment below and update the code to test getAllPhyInterfaceDetail
        //instance.getAllPhyInterfaceDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPhyInterfaceInTenant', function() {
      it('should call getAllPhyInterfaceInTenant successfully', function(done) {
        //uncomment below and update the code to test getAllPhyInterfaceInTenant
        //instance.getAllPhyInterfaceInTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPrismInterfaceBrief', function() {
      it('should call getAllPrismInterfaceBrief successfully', function(done) {
        //uncomment below and update the code to test getAllPrismInterfaceBrief
        //instance.getAllPrismInterfaceBrief(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPrismInterfaceInTenant', function() {
      it('should call getAllPrismInterfaceInTenant successfully', function(done) {
        //uncomment below and update the code to test getAllPrismInterfaceInTenant
        //instance.getAllPrismInterfaceInTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOnePrismInterface', function() {
      it('should call getOnePrismInterface successfully', function(done) {
        //uncomment below and update the code to test getOnePrismInterface
        //instance.getOnePrismInterface(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrismInterfaceAdd', function() {
      it('should call updatePrismInterfaceAdd successfully', function(done) {
        //uncomment below and update the code to test updatePrismInterfaceAdd
        //instance.updatePrismInterfaceAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrismInterfaceRemove', function() {
      it('should call updatePrismInterfaceRemove successfully', function(done) {
        //uncomment below and update the code to test updatePrismInterfaceRemove
        //instance.updatePrismInterfaceRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
