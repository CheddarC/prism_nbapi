/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PrismNbapi);
  }
}(this, function(expect, PrismNbapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PrismNbapi.MulticastApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MulticastApi', function() {
    describe('createMulticast', function() {
      it('should call createMulticast successfully', function(done) {
        //uncomment below and update the code to test createMulticast
        //instance.createMulticast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMulticastInTenant', function() {
      it('should call createMulticastInTenant successfully', function(done) {
        //uncomment below and update the code to test createMulticastInTenant
        //instance.createMulticastInTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMulticast', function() {
      it('should call deleteMulticast successfully', function(done) {
        //uncomment below and update the code to test deleteMulticast
        //instance.deleteMulticast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMulticastInTenant', function() {
      it('should call deleteMulticastInTenant successfully', function(done) {
        //uncomment below and update the code to test deleteMulticastInTenant
        //instance.deleteMulticastInTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllMulicastInfoInTenant', function() {
      it('should call getAllMulicastInfoInTenant successfully', function(done) {
        //uncomment below and update the code to test getAllMulicastInfoInTenant
        //instance.getAllMulicastInfoInTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllMulticastInfo', function() {
      it('should call getAllMulticastInfo successfully', function(done) {
        //uncomment below and update the code to test getAllMulticastInfo
        //instance.getAllMulticastInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMulticast', function() {
      it('should call updateMulticast successfully', function(done) {
        //uncomment below and update the code to test updateMulticast
        //instance.updateMulticast(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMulticastInTenant', function() {
      it('should call updateMulticastInTenant successfully', function(done) {
        //uncomment below and update the code to test updateMulticastInTenant
        //instance.updateMulticastInTenant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
