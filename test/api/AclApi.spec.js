/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PrismNbapi);
  }
}(this, function(expect, PrismNbapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PrismNbapi.AclApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AclApi', function() {
    describe('createAclIpv4', function() {
      it('should call createAclIpv4 successfully', function(done) {
        //uncomment below and update the code to test createAclIpv4
        //instance.createAclIpv4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAclIpv6', function() {
      it('should call createAclIpv6 successfully', function(done) {
        //uncomment below and update the code to test createAclIpv6
        //instance.createAclIpv6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAclIpv4', function() {
      it('should call deleteAclIpv4 successfully', function(done) {
        //uncomment below and update the code to test deleteAclIpv4
        //instance.deleteAclIpv4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAclIpv6', function() {
      it('should call deleteAclIpv6 successfully', function(done) {
        //uncomment below and update the code to test deleteAclIpv6
        //instance.deleteAclIpv6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAclIpv4Info', function() {
      it('should call getAclIpv4Info successfully', function(done) {
        //uncomment below and update the code to test getAclIpv4Info
        //instance.getAclIpv4Info(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAclIpv6Info', function() {
      it('should call getAclIpv6Info successfully', function(done) {
        //uncomment below and update the code to test getAclIpv6Info
        //instance.getAclIpv6Info(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
