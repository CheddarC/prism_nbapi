/**
 * PRISM NBAPI
 * This is a PRISM NBAPI API Client module.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PrismNbapi);
  }
}(this, function(expect, PrismNbapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PrismNbapi.IntfStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntfStats', function() {
    it('should create an instance of IntfStats', function() {
      // uncomment below and update the code to test IntfStats
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be.a(PrismNbapi.IntfStats);
    });

    it('should have the property collisions (base name: "collisions")', function() {
      // uncomment below and update the code to test the property collisions
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property multicast (base name: "multicast")', function() {
      // uncomment below and update the code to test the property multicast
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxBytes (base name: "rx_bytes")', function() {
      // uncomment below and update the code to test the property rxBytes
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxCompressed (base name: "rx_compressed")', function() {
      // uncomment below and update the code to test the property rxCompressed
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxCrcErrors (base name: "rx_crc_errors")', function() {
      // uncomment below and update the code to test the property rxCrcErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxDropped (base name: "rx_dropped")', function() {
      // uncomment below and update the code to test the property rxDropped
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxErrors (base name: "rx_errors")', function() {
      // uncomment below and update the code to test the property rxErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxFifoErrors (base name: "rx_fifo_errors")', function() {
      // uncomment below and update the code to test the property rxFifoErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxFrameErrors (base name: "rx_frame_errors")', function() {
      // uncomment below and update the code to test the property rxFrameErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxLengthErrors (base name: "rx_length_errors")', function() {
      // uncomment below and update the code to test the property rxLengthErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxMissedErrors (base name: "rx_missed_errors")', function() {
      // uncomment below and update the code to test the property rxMissedErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxOverErrors (base name: "rx_over_errors")', function() {
      // uncomment below and update the code to test the property rxOverErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property rxPackets (base name: "rx_packets")', function() {
      // uncomment below and update the code to test the property rxPackets
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txAbortedErrors (base name: "tx_aborted_errors")', function() {
      // uncomment below and update the code to test the property txAbortedErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txBytes (base name: "tx_bytes")', function() {
      // uncomment below and update the code to test the property txBytes
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txCarrierErrors (base name: "tx_carrier_errors")', function() {
      // uncomment below and update the code to test the property txCarrierErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txCompressed (base name: "tx_compressed")', function() {
      // uncomment below and update the code to test the property txCompressed
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txDropped (base name: "tx_dropped")', function() {
      // uncomment below and update the code to test the property txDropped
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txErrors (base name: "tx_errors")', function() {
      // uncomment below and update the code to test the property txErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txFifoErrors (base name: "tx_fifo_errors")', function() {
      // uncomment below and update the code to test the property txFifoErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txHeartbeatErrors (base name: "tx_heartbeat_errors")', function() {
      // uncomment below and update the code to test the property txHeartbeatErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txPackets (base name: "tx_packets")', function() {
      // uncomment below and update the code to test the property txPackets
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

    it('should have the property txWindowErrors (base name: "tx_window_errors")', function() {
      // uncomment below and update the code to test the property txWindowErrors
      //var instane = new PrismNbapi.IntfStats();
      //expect(instance).to.be();
    });

  });

}));
